buildscript {
	repositories {
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven" 
		}
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
	}
}

plugins {
	id "com.matthewprenger.cursegradle" version "1.2.0"
	id "com.jfrog.bintray" version "1.8.4"
}

apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = "betteradvancements"
archivesBaseName = "BetterAdvancements-" + version_minecraft

version = version_major + '.' + version_minor + '.' + version_revis

//adds the build number to the end of the version string if on a build server
if (System.getenv('TRAVIS_BUILD_NUMBER') != null) {
    version += ".${System.getenv('TRAVIS_BUILD_NUMBER')}"
}

repositories {
    maven {
        name = "jei"
        url =  "http://dvs1.progwml6.com/files/maven"
    }
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiCompile.extendsFrom(compile)
}

dependencies {
	minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"
}

minecraft {
	mappings channel: "snapshot", version: "${version_mappings}".toString()

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client = {
			// recommended logging data for a userdev environment
			properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
			// recommended logging level for the console
			properties 'forge.logging.console.level': 'debug'
			workingDirectory project.file('run').canonicalPath
			source sourceSets.main
			source sourceSets.api
		}
		server = {
			// recommended logging data for a userdev environment
			properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
			// recommended logging level for the console
			properties 'forge.logging.console.level': 'debug'
			workingDirectory project.file('run').canonicalPath
			source sourceSets.main
			source sourceSets.api
		}
	}
}


jar {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
	from sourceSets.main.output.classesDirs
	from sourceSets.api.output.classesDirs
	from sourceSets.main.output.resourcesDir
	from sourceSets.api.output.resourcesDir
	
	manifest {
		attributes([
				"Specification-Title": "Better Advancements",
				"Specification-Vendor": "way2muchnoise",
				"Specification-Version": project.version,
				"Implementation-Title": project.name,
				"Implementation-Version": project.version,
				"Implementation-Vendor" :"way2muchnoise",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		])
	}

	destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
	classifier = "javadoc"
	from javadoc.destinationDir
	destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

task sourcesJar(type: Jar) {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
	classifier = "sources"
	from sourceSets.main.allJava
	from sourceSets.api.allJava
	destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

task apiJar(type: Jar) {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
	classifier = "api"
	from sourceSets.api.output
	destinationDir = file (rootProject.getRootDir().getPath() + '/output')

	// TODO: when FG bug is fixed, remove allJava from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.api.allJava
}

artifacts {
	archives jar, javadocJar, sourcesJar, apiJar
}

curseforge {
    apiKey = System.getenv('CURSE_KEY') == null ? '0' : System.getenv('CURSE_KEY')
    project {
        id = curse_project_id
        changelog = System.getenv('CHANGELOG') == null ? '' : System.getenv('CHANGELOG')
        changelogType = 'markdown'
        releaseType =  'alpha'
        mainArtifact (jar) {
            displayName = "${jar.archiveName}".replace(".jar", "")
        }
        addArtifact (javadocJar) {
            displayName = "${javadocJar.archiveName}".replace(".jar", "")
        }
        addArtifact (sourcesJar) {
            displayName = "${sourcesJar.archiveName}".replace(".jar", "")
        }
        addArtifact (apiJar) {
            displayName = "${apiJar.archiveName}".replace(".jar", "")
        }
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            artifact javadocJar
            artifact sourcesJar
            artifact apiJar
            artifact jar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']
    publish = true
    pkg {
        repo = 'dev'
        name = 'BetterAdvancements'
        version {
            name = project.version
            released = new Date()
        }
    }
}

idea {
	module {
		for (String excludeDirName in ["run", "out", "ouput", "logs", "gradle"]) {
			File excludeDir = new File(projectDir, excludeDirName)
			excludeDirs.add(excludeDir)
		}
	}
}